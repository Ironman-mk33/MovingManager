from flask import Flask, render_template, request, jsonify
import mediapipe as mp
import numpy as np
import cv2
import base64

app = Flask(__name__)

# SSL証明書と秘密鍵のファイルパスを指定します
ssl_certfile = 'ssl\cert.pem'  # 証明書のパス
ssl_keyfile = 'ssl\privkey.pem'  # 秘密鍵のパス

# Mediapipeの設定
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(static_image_mode=False, max_num_faces=1, refine_landmarks=True, min_detection_confidence=0.5)

# 目のランドマークID
LEFT_EYE = [362, 385, 387, 263, 373, 380]  # 左目
RIGHT_EYE = [33, 160, 158, 133, 153, 144]  # 右目

def calculate_ear(eye_points, landmarks):
    """目のEARを計算する関数"""
    p1 = np.array([landmarks[eye_points[1]].x, landmarks[eye_points[1]].y])
    p2 = np.array([landmarks[eye_points[5]].x, landmarks[eye_points[5]].y])
    p3 = np.array([landmarks[eye_points[2]].x, landmarks[eye_points[2]].y])
    p4 = np.array([landmarks[eye_points[4]].x, landmarks[eye_points[4]].y])
    p0 = np.array([landmarks[eye_points[0]].x, landmarks[eye_points[0]].y])
    p3_ = np.array([landmarks[eye_points[3]].x, landmarks[eye_points[3]].y])
    
    # EAR = (縦の距離の平均) / 横の距離
    vertical = np.linalg.norm(p1 - p2) + np.linalg.norm(p3 - p4)
    horizontal = np.linalg.norm(p0 - p3_)
    return vertical / (2.0 * horizontal)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/process_frame', methods=['POST'])
def process_frame():
    """クライアントから送信されたフレームを処理するエンドポイント"""
    data = request.json
    image_data = base64.b64decode(data['frame'].split(',')[1])
    nparr = np.frombuffer(image_data, np.uint8)
    frame = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

    # Mediapipeで処理
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(frame_rgb)

    response = {'status': 'no_face_detected'}

    if results.multi_face_landmarks:
        for face_landmarks in results.multi_face_landmarks:
            # 左目と右目のEARを計算
            left_ear = calculate_ear(LEFT_EYE, face_landmarks.landmark)
            right_ear = calculate_ear(RIGHT_EYE, face_landmarks.landmark)
            avg_ear = (left_ear + right_ear) / 2.0

            # 閾値を設定（例: 0.25以下で目を閉じていると判断）
            response = {
                'status': 'eyes_closed' if avg_ear < 0.25 else 'eyes_open',
                'ear': avg_ear
            }

    return jsonify(response)

if __name__ == '__main__':
    app.run(ssl_context=(ssl_certfile, ssl_keyfile),debug=False, host='0.0.0.0', port=443)

